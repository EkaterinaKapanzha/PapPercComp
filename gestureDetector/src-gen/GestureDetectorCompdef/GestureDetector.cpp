// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define GestureDetectorCompdef_GestureDetector_BODY

/************************************************************
 GestureDetector class body
 ************************************************************/

// include associated header file
#include "GestureDetectorCompdef/GestureDetector.h"

// Derived includes directives
#include "GestureDetectorCompdef/GestureDetector_impl.h"
#include "rclcpp/rclcpp.hpp"

// Include from Include declaration (body)
// declare options
rclcpp::NodeOptions gesturedetector_options;

int main(int argc, char **argv) {
	rclcpp::init(argc, argv);

	auto gesturedetector = std::make_shared<
			GestureDetectorCompdef::GestureDetector_impl>(
			gesturedetector_options);

	RCLCPP_INFO(gesturedetector->get_logger(),
			"GestureDetector has been initialized");

	rclcpp::executors::MultiThreadedExecutor executor;

	executor.add_node(gesturedetector->get_node_base_interface());

	executor.spin();
	rclcpp::shutdown();
}

// End of Include declaration (body)

namespace GestureDetectorCompdef {

// static attributes (if any)

/**
 * 
 * @param options 
 */
GestureDetector::GestureDetector(rclcpp::NodeOptions /*in*/options) :
		rclcpp_lifecycle::LifecycleNode("GestureDetector", options) {
	points_S_sub_ = create_subscription<std_msgs::msg::Float32MultiArray>(
			"points_S", rclcpp::QoS(rclcpp::KeepLast(100)).best_effort(),
			std::bind(
					&GestureDetectorCompdef::GestureDetector_impl::fNewFunction,
					(GestureDetector_impl*) this, std::placeholders::_1));

	command_P_pub_ = create_publisher<std_msgs::msg::String>("command_P", 1);
	// directly activate a publisher
	command_P_pub_->on_activate();

}

} // of namespace GestureDetectorCompdef

/************************************************************
 End of GestureDetector class body
 ************************************************************/
