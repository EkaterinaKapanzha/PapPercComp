// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define TestCompdef_Test_BODY

/************************************************************
 Test class body
 ************************************************************/

// include associated header file
#include "TestCompdef/Test.h"

// Derived includes directives
#include "rclcpp/rclcpp.hpp"

// Include from Include declaration (body)
// declare options
rclcpp::NodeOptions test_options;

int main(int argc, char **argv) {
	rclcpp::init(argc, argv);

	auto test = std::make_shared < TestCompdef::Test > (test_options);

	RCLCPP_INFO(test->get_logger(), "Test has been initialized");

	rclcpp::executors::MultiThreadedExecutor executor;

	executor.add_node(test->get_node_base_interface());

	executor.spin();
	rclcpp::shutdown();
}

// End of Include declaration (body)

namespace TestCompdef {

// static attributes (if any)

/**
 * 
 * @param options 
 */
Test::Test(rclcpp::NodeOptions /*in*/options) :
		rclcpp_lifecycle::LifecycleNode("Test", options) {

	RCLCPP_INFO(this->get_logger(), "ZedCamera constructor");
	Port_pub = this->create_publisher <std_msgs::msg::Bool > ("Port",1);
	Port_pub->on_activate();
	// directly activate a publisher
	auto message = std_msgs::msg::Bool();
	message.data = 16;
	for(int i = 0; i<100; i++)
	this->Port_pub->publish(message);


}

} // of namespace TestCompdef

/************************************************************
 End of Test class body
 ************************************************************/
