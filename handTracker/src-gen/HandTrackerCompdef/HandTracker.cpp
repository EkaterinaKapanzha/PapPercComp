// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define HandTrackerCompdef_HandTracker_BODY

/************************************************************
 HandTracker class body
 ************************************************************/

// include associated header file
#include "HandTrackerCompdef/HandTracker.h"

// Derived includes directives
#include "HandTrackerCompdef/HandTracker_impl.h"
#include "rclcpp/rclcpp.hpp"

// Include from Include declaration (body)
// declare options
rclcpp::NodeOptions handtracker_options;

int main(int argc, char **argv) {
	rclcpp::init(argc, argv);

	auto handtracker = std::make_shared<HandTrackerCompdef::HandTracker_impl>(
			handtracker_options);

	RCLCPP_INFO(handtracker->get_logger(), "HandTracker has been initialized");

	rclcpp::executors::MultiThreadedExecutor executor;

	executor.add_node(handtracker->get_node_base_interface());

	executor.spin();
	rclcpp::shutdown();
}

// End of Include declaration (body)

namespace HandTrackerCompdef {

// static attributes (if any)

/**
 * 
 * @param options 
 */
HandTracker::HandTracker(rclcpp::NodeOptions /*in*/options) :
		rclcpp_lifecycle::LifecycleNode("HandTracker", options) {
	image_S_sub_ = create_subscription<sensor_msgs::msg::Image>("image_S",
			rclcpp::QoS(rclcpp::KeepLast(100)).best_effort(),
			std::bind(&HandTrackerCompdef::HandTracker_impl::imageHandler,
					(HandTracker_impl*) this, std::placeholders::_1));

	points_P_pub_ = create_publisher<std_msgs::msg::Float32MultiArray>(
			"points_P", 1);
	// directly activate a publisher
	points_P_pub_->on_activate();

}

} // of namespace HandTrackerCompdef

/************************************************************
 End of HandTracker class body
 ************************************************************/
